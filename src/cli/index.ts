#!/usr/bin/env node

import * as fs from 'fs';
import * as path from 'path';
import * as dotenv from 'dotenv';

dotenv.config({ path: '.env.local' });

import { NotionNextJSConfig } from '../types';
import { NotionNextJS } from '../client';
import { generateTypesFile } from '../types/type-generator';

const CONFIG_FILENAME = 'notion.config.js';

function promptUser(question: string): Promise<string> {
	return new Promise((resolve) => {
		process.stdout.write(question + ' ');
		process.stdin.setEncoding('utf8');
		process.stdin.once('data', (data) => {
			resolve(data.toString().trim());
		});
	});
}

async function loadConfig(): Promise<NotionNextJSConfig> {
	const configPath = path.resolve(process.cwd(), CONFIG_FILENAME);

	if (!fs.existsSync(configPath)) {
		throw new Error(`Configuration file not found. Run "npx notion-nextjs setup" first.`);
	}

	// Clear require cache to ensure fresh config
	delete require.cache[configPath];
	return require(configPath);
}

async function sync() {
	console.log('\nüîÑ Syncing Notion databases...\n');

	// Load configuration
	const config = await loadConfig();

	// Check for API key
	const apiKey = process.env.NOTION_API_KEY;
	if (!apiKey) {
		throw new Error('NOTION_API_KEY environment variable not found. Add it to your .env.local file.');
	}

	// Initialize client
	const notion = new NotionNextJS(apiKey, config);
	const client = notion.getNotionClient();

	// Fetch all database schemas
	const databases = new Map();

	for (const [name, databaseId] of Object.entries(config.databases)) {
		try {
			console.log(`üìä Fetching schema for "${name}"...`);
			const database = await client.databases.retrieve({ database_id: databaseId });
			databases.set(name, database);
			console.log(`‚úÖ Fetched schema for "${name}"`);
		} catch (error: any) {
			console.error(`‚ùå Failed to fetch "${name}": ${error.message}`);
		}
	}

	if (databases.size === 0) {
		throw new Error('No databases could be fetched. Check your configuration and API key.');
	}

	// Generate types file
	console.log('\nüìù Generating TypeScript types...');
	const typesContent = generateTypesFile(databases);

	// Write types file
	const typesDir = path.resolve(process.cwd(), 'types');
	if (!fs.existsSync(typesDir)) {
		fs.mkdirSync(typesDir, { recursive: true });
	}

	const typesPath = path.join(typesDir, 'notion.ts');
	fs.writeFileSync(typesPath, typesContent);
	console.log(`‚úÖ Generated types at ${typesPath}`);

	// TODO: Cache data if dataSource is 'local'
	if (config.dataSource === 'local') {
		console.log('\nüì¶ Local caching will be implemented in the next update!');
	}

	console.log('\n‚ú® Sync complete!\n');
}

async function setup() {
	// ... previous setup code remains the same ...
	console.log('\nüöÄ Welcome to notion-nextjs setup!\n');

	// Check if config already exists
	if (fs.existsSync(CONFIG_FILENAME)) {
		const overwrite = await promptUser('Config file already exists. Overwrite? (y/N):');
		if (overwrite.toLowerCase() !== 'y') {
			console.log('Setup cancelled.');
			process.exit(0);
		}
	}

	// Collect database information
	const databases: Record<string, string> = {};
	console.log('Enter your Notion database information:\n');

	let isFirstDatabase = true;
	while (true) {
		const prompt = isFirstDatabase ? 'Database name (e.g., "blog"):' : 'Database name (or press Enter to finish):';

		const name = await promptUser(prompt);
		if (!name) break;

		const id = await promptUser('Database ID:');
		if (!id) {
			console.log('Database ID is required. Skipping this database.\n');
			continue;
		}

		databases[name] = id;
		console.log(`‚úÖ Added database "${name}"\n`);
		isFirstDatabase = false;
	}

	if (Object.keys(databases).length === 0) {
		console.log('No databases configured. Setup cancelled.');
		process.exit(1);
	}

	// Ask about additional options
	const enableImages = await promptUser('Enable image optimization? (Y/n):');
	const useLocalCache = await promptUser('Enable local caching? (Y/n):');

	// Create configuration with local as default
	const config: NotionNextJSConfig = {
		databases,
		dataSource: useLocalCache.toLowerCase() === 'n' ? 'live' : 'local',
	};

	if (enableImages.toLowerCase() !== 'n') {
		config.images = {
			enabled: true,
			outputDir: '/public/images/notion',
			format: 'webp',
			quality: 85,
		};
	}

	if (config.dataSource === 'local') {
		config.outputDir = '.notion-cache';
	}

	// Generate config file content
	const configContent = `// notion.config.js
// Generated by notion-nextjs

/** @type {import('notion-nextjs').NotionNextJSConfig} */
module.exports = {
  databases: ${JSON.stringify(databases, null, 4).replace(/\n/g, '\n  ')},
  dataSource: '${config.dataSource}',
${config.outputDir ? `  outputDir: '${config.outputDir}',\n` : ''}${
		config.images
			? `  images: {
    enabled: ${config.images.enabled},
    outputDir: '${config.images.outputDir}',
    format: '${config.images.format}',
    quality: ${config.images.quality},
  },\n`
			: ''
	}};
`;

	// Write config file
	fs.writeFileSync(CONFIG_FILENAME, configContent);
	console.log(`\n‚úÖ Created ${CONFIG_FILENAME}`);

	// Create .env.local template if it doesn't exist
	const envPath = '.env.local';
	if (!fs.existsSync(envPath)) {
		const envContent = `# Notion API Configuration
NOTION_API_KEY=your-notion-integration-token-here
`;
		fs.writeFileSync(envPath, envContent);
		console.log(`‚úÖ Created ${envPath} template`);
	}

	// Show next steps
	console.log('\nüìù Next steps:');
	console.log('1. Add your Notion API key to .env.local');
	console.log('2. Run "npx notion-nextjs sync" to generate types');
	console.log('3. Import and use notion-nextjs in your project:');
	console.log('\n   ```typescript');
	console.log('   import { NotionNextJS } from "notion-nextjs";');
	console.log('   import config from "./notion.config.js";');
	console.log('   import type { BlogPage } from "./types/notion";');
	console.log('');
	console.log('   const notion = new NotionNextJS(process.env.NOTION_API_KEY!, config);');
	console.log('   const pages = await notion.getAllPages<BlogPage>("blog");');
	console.log('   ```\n');

	process.exit(0);
}

async function main() {
	const command = process.argv[2];

	switch (command) {
		case 'setup':
			await setup();
			break;
		case 'sync':
			await sync();
			break;
		default:
			console.log('notion-nextjs CLI\n');
			console.log('Commands:');
			console.log('  setup  - Initialize notion-nextjs configuration');
			console.log('  sync   - Sync data and generate types');
			break;
	}
}

// Handle errors
process.on('uncaughtException', (error) => {
	console.error('\n‚ùå Error:', error.message);
	process.exit(1);
});

main();
