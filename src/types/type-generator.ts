import { DatabaseObjectResponse } from '@notionhq/client/build/src/api-endpoints';
import { PropertyNamingConvention, createPropertyMapping } from '../utils/property-transformer';

export interface PropertyTypeMapping {
	[key: string]: string;
}

const NOTION_TYPE_TO_TS: PropertyTypeMapping = {
	title: 'string',
	rich_text: 'string',
	number: 'number',
	select: 'string | null',
	multi_select: 'string[]',
	date: 'string | null',
	checkbox: 'boolean',
	url: 'string | null',
	email: 'string | null',
	phone_number: 'string | null',
	files: '{ name: string; url: string; type: string }[]',
	formula: 'any',
	rollup: 'any',
	people: '{ id: string; name?: string; avatarUrl?: string; email?: string }[]',
	relation: 'string[]',
	created_time: 'string',
	created_by: '{ id: string; name?: string; avatarUrl?: string }',
	last_edited_time: 'string',
	last_edited_by: '{ id: string; name?: string; avatarUrl?: string }',
	status: 'string | null',
	unique_id: 'number | null',
	button: 'null',
	verification: 'any',
};

/**
 * Generate TypeScript interface from Notion database schema
 */
export function generateTypeFromDatabase(
	database: DatabaseObjectResponse,
	interfaceName: string,
	propertyNaming: PropertyNamingConvention = 'camelCase'
): string {
	const originalNames = Object.keys(database.properties);
	const nameMapping = createPropertyMapping(originalNames, propertyNaming);

	const properties = Object.entries(database.properties)
		.map(([propName, propConfig]) => {
			const tsType = NOTION_TYPE_TO_TS[propConfig.type] || 'any';
			const transformedName = nameMapping[propName];
			return `    ${transformedName}: ${tsType};`;
		})
		.join('\n');

	// Generate comment with mapping if names were transformed
	const mappingComment =
		propertyNaming !== 'none'
			? `  /**
   * Property name mapping:
${Object.entries(nameMapping)
	.filter(([original, transformed]) => original !== transformed)
	.map(([original, transformed]) => `   * - "${original}" â†’ ${transformed}`)
	.join('\n')}
   */\n`
			: '';

	return `export interface ${interfaceName} extends SimplifiedPage {
${mappingComment} 
  simplifiedProperties: {
${properties}
  };
}`;
}

/**
 * Generate a complete types file for all databases
 */
export function generateTypesFile(
	databases: Map<string, DatabaseObjectResponse>,
	propertyNaming: PropertyNamingConvention = 'camelCase'
): string {
	const imports = `// Generated by notion-nextjs
// Do not edit manually - run "npx notion-nextjs sync" to update

import type { SimplifiedPage } from 'notion-nextjs';

`;

	const interfaces = Array.from(databases.entries())
		.map(([name, database]) => {
			const interfaceName = toPascalCase(name) + 'Page';
			return generateTypeFromDatabase(database, interfaceName, propertyNaming);
		})
		.join('\n\n');

	return imports + interfaces;
}

/**
 * Convert string to PascalCase
 */
function toPascalCase(str: string): string {
	return str
		.replace(/(?:^\w|[A-Z]|\b\w)/g, (word, index) => {
			return index === 0 ? word.toUpperCase() : word.toUpperCase();
		})
		.replace(/[\s-_]+/g, '');
}
