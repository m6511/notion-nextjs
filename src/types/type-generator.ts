import { DatabaseObjectResponse } from '@notionhq/client/build/src/api-endpoints';

export interface PropertyTypeMapping {
	[key: string]: string;
}

const NOTION_TYPE_TO_TS: PropertyTypeMapping = {
	title: 'string',
	rich_text: 'string',
	number: 'number',
	select: 'string | null',
	multi_select: 'string[]',
	date: 'string | null',
	checkbox: 'boolean',
	url: 'string | null',
	email: 'string | null',
	phone_number: 'string | null',
	files: '{ name: string; url: string; type: string }[]',
	formula: 'any',
	rollup: 'any',
	people: '{ id: string; name?: string; avatarUrl?: string; email?: string }[]',
	relation: 'string[]',
	created_time: 'string',
	created_by: '{ id: string; name?: string; avatarUrl?: string }',
	last_edited_time: 'string',
	last_edited_by: '{ id: string; name?: string; avatarUrl?: string }',
	status: 'string | null',
	unique_id: 'number | null',
	button: 'null',
	verification: 'any',
};

/**
 * Generate TypeScript interface from Notion database schema
 */
export function generateTypeFromDatabase(database: DatabaseObjectResponse, interfaceName: string): string {
	const properties = Object.entries(database.properties)
		.map(([propName, propConfig]) => {
			const tsType = NOTION_TYPE_TO_TS[propConfig.type] || 'any';
			// Escape property names that need quotes
			const safePropName = /^[a-zA-Z_$][a-zA-Z0-9_$]*$/.test(propName) ? propName : `"${propName}"`;
			return `    ${safePropName}: ${tsType};`;
		})
		.join('\n');

	return `export interface ${interfaceName} extends SimplifiedPage {
  // Override properties with specific types for this database
  simplifiedProperties: {
${properties}
  };
}`;
}

/**
 * Generate a complete types file for all databases
 */
export function generateTypesFile(databases: Map<string, DatabaseObjectResponse>): string {
	const imports = `// Generated by notion-nextjs
// Do not edit manually - run "npx notion-nextjs sync" to update

import type { SimplifiedPage } from 'notion-nextjs';

`;

	const interfaces = Array.from(databases.entries())
		.map(([name, database]) => {
			const interfaceName = toPascalCase(name) + 'Page';
			return generateTypeFromDatabase(database, interfaceName);
		})
		.join('\n\n');

	return imports + interfaces;
}

/**
 * Convert string to PascalCase
 */
function toPascalCase(str: string): string {
	return str
		.replace(/(?:^\w|[A-Z]|\b\w)/g, (word, index) => {
			return index === 0 ? word.toUpperCase() : word.toUpperCase();
		})
		.replace(/[\s-_]+/g, '');
}
